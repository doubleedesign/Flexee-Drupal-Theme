/*============================================================
	Pixels to ems
	Source: https://css-tricks.com/snippets/sass/px-to-em-functions/
	Usage example:
		width: em-calc(1280);
============================================================*/
$browser-context: 16; // Default
@function em-calc($pixels, $context: $browser-context) {
	@return #{$pixels/$context}em;
}

/*============================================================
	Strip unit
	Removes the unit (e.g. px, em, rem) from a value, returning the number only.
	Source: https://github.com/zurb/foundation-sites/releases/tag/v6.4.3
============================================================*/
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

/*============================================================
	Pixels to rems
	Source: https://github.com/zurb/foundation-sites/releases/tag/v6.4.3
	Usage example:
		width: rem-calc(1280);
		font-size: rem-calc(18);
============================================================*/
@function rem-calc($values, $base: null) {
	$rem-values: ();
	$count: length($values);

	// If no base is defined, defer to the global font size
	@if $base == null {
		$base: 16px;
	}

	// If the base font size is a %, then multiply it by 16px
	// This is because 100% font size = 16px in most all browsers
	@if unit($base) == '%' {
		$base: ($base / 100%) * 16px;
	}

	// Using rem as base allows correct scaling
	@if unit($base) == 'rem' {
		$base: strip-unit($base) * 16px;
	}

	@if $count == 1 {
		@return -zf-to-rem($values, $base);
	}

	@for $i from 1 through $count {
		$rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
	}

	@return $rem-values;
}

// Converts a unitless, pixel, or rem value to em, for use in breakpoints.
@function -zf-bp-to-em($value) {
	// Pixel and unitless values are converted to rems
	@if unit($value) == 'px' or unitless($value) {
		$value: rem-calc($value, $base: 16px);
	}

	// Then the value is converted to ems
	@return strip-unit($value) * 1em;
}

// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value
@function -zf-to-rem($value, $base: null) {
	// Check if the value is a number
	@if type-of($value) != 'number' {
		@warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
		@return $value;
	}

	// Transform em into rem if someone hands over 'em's
	@if unit($value) == 'em' {
		$value: strip-unit($value) * 1rem;
	}

	// Calculate rem if units for $value is not rem or em
	@if unit($value) != 'rem' {
		$value: strip-unit($value) / strip-unit($base) * 1rem;
	}

	// Turn 0rem into 0
	@if $value == 0rem {
		$value: 0;
	}

	@return $value;
}

/*============================================================
	Map-deep-get
	Source: Hugo Giraudel
============================================================*/
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}